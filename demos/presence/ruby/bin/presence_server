#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"

require "ffi-rzmq"
require "clone"
require "json"
require "thread"

@clients = {}
@updates = Queue.new

server = Clone::Server.new(ZMQ::Context.new(1), {
  :publish => "tcp://*:10001",
  :router  => "tcp://*:10002",
  :pull    => "tcp://*:10003"
})

server.on_request do |payload|
  JSON.generate(Hash[*(@clients.dup.map do |k, v|
    [k, {"name" => k, "online" => v['online'], "text" => v['text']}]
  end.flatten)])
end

server.on_push do |payload|
  begin
    data = JSON.parse(payload)
    client = @clients[data["name"]] || {}
    client["last_seen"] = Time.now
    if client["online"] != data["online"]
      @updates << JSON.generate({
        "name" => data["name"],
        "online" => data["online"]
      })
      client["online"] = data["online"]
    end
    if client["text"] != data["text"]
      @updates << JSON.generate({
        "name" => data["name"],
        "text" => data["text"]
      })
      client["text"] = data["text"]
    end
    client["timeout"] = data["timeout"]
    @clients[data["name"]] = client unless @clients[data["name"]]
  rescue JSON::ParserError
  end
end

server.publish do
  update = @updates.pop
  $stdout << update+"\r\n"
  update
end

begin
  puts "starting server..."
  server.start

  loop do
    @clients.dup.each do |name, client|
      if client['online'] && ((Time.now - client['last_seen']) > client['timeout'])
        @clients[name]['online'] = false
        @updates << JSON.generate({
          "name" => name,
          "online" => false
        })
      end
    end
  end
rescue Interrupt
  puts "stopping server..."
  server.stop
end
